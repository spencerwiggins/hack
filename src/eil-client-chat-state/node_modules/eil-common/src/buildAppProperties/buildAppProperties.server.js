//@flow
import convict from 'convict';

import defaultSchema from './appPropertiesDefaultSchema';

convict.addFormat({
  name: 'boolean',
  validate(val) {
    const downcased = (val || '').toLowerCase();
    if (!(downcased === '' || downcased === 'true' || downcased === 'false' || downcased === '1' || downcased === '0')) {
      throw new Error('A boolean must be one of: true, false, 0, 1');
    }
  },
});

// eslint-disable-next-line no-unused-vars
function buildAppProperties<PropList>(schema: Object = {}, customEnv?: Object = {}): AppProperties<PropList> {
  const config: AppProperties<PropList> = convict({
    ...defaultSchema,
    ...schema,
  });

  config.validate({ strict: true });

  return config;
}

export default buildAppProperties;
