//@flow
import defaultSchema from './appPropertiesDefaultSchema';

// Webpack replaces refs to `process.env.*` with the string literal, so we can't do dynamic property
// access.  This object gets around that, but we need to add any env vars here that we want to access
// through appProperties.
const env = {
  NODE_ENV: process.env.NODE_ENV,
  LOG_LEVEL: process.env.LOG_LEVEL,

  EIL_PLATFORM_URI: process.env.EIL_PLATFORM_URI,
  EIL_PLATFORM_APP_ID: process.env.EIL_PLATFORM_APP_ID,
  EIL_PLATFORM_APP_TOKEN: process.env.EIL_PLATFORM_APP_TOKEN,
};

function buildAppProperties<PropList>(schema: Object = {}, customEnv?: Object = {}): AppProperties<PropList> {
  const combinedSchema = {
    ...defaultSchema,
    ...schema,
  };

  const combinedEnv = {
    ...env,
    ...customEnv,
  };

  const getNode = function getNode(key: any) {
    return key.split('.').reduce((acc, key) => {
      return acc[key];
    }, combinedSchema);
  };

  const config: AppProperties<PropList> = {
    get: (key: PropList) => {
      return combinedEnv[getNode(key).env];
    },

    set: (key: PropList, val: string) => {
      combinedEnv[getNode(key).env] = val;
    },

    validate: () => {},
  };

  return config;
}

export default buildAppProperties;
