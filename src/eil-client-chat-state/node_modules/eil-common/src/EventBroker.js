//@flow
class EventBroker<ReceiverShape: Object> {
  receivers: Array<$Shape<ReceiverShape>>;
  suspendedReceivers: Array<$Shape<ReceiverShape>>;
  suspendedHandlers: Array<() => void>;

  constructor() {
    this.receivers = [];
    this.suspendedReceivers = [];
    this.suspendedHandlers = [];
  }

  addReceiver(receiver: $Shape<ReceiverShape>) {
    this.receivers.push(receiver);
  }

  removeReceiver(receiver: $Shape<ReceiverShape>) {
    const index = this.receivers.indexOf(receiver);
    if (index >= 0) {
      this.receivers.splice(index, 1);
    }
  }

  removeAllReceivers() {
    this.receivers = [];
  }

  suspendCurrentReceivers() {
    this.suspendedReceivers = this.suspendedReceivers.concat(this.receivers);
    this.receivers = [];
  }

  resumeAllReceivers({ skipReplay }: { skipReplay?: boolean } = {}) {
    if (!skipReplay) {
      for (const fn of this.suspendedHandlers) {
        fn();
      }
    }

    this.receivers = this.receivers.concat(this.suspendedReceivers);
    this.suspendedReceivers = [];
    this.suspendedHandlers = [];
  }

  _trigger<T>(selector: (receiver: $Shape<ReceiverShape>) => T, binder: (fn: T) => () => void): void {
    this.receivers
      .map(selector)
      .filter(fn => !!fn)
      .map(binder)
      .forEach(fn => fn());

    this.suspendedReceivers
      .map(selector)
      .filter(fn => !!fn)
      .map(binder)
      .forEach(fn => this.suspendedHandlers.push(fn));
  }
}

export default EventBroker;
