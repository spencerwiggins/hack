//@flow
/* eslint-disable no-console */
if (!global._babelPolyfill) {
  require('babel-polyfill');
}

declare type Options = {
  logger?: Object,
  memberModelName?: string
}

export default async function setupLoopbackRoles(server: Object, roles: {[key:string]: Array<string>}, options: Options={}) {
  const {
    logger = { info: (msg) => console.log(msg) },
    memberModelName = 'Member',
  } = options;
  // enable authentication

  for (let roleName in roles) {
    const [role, created] = await server.models.Role.findOrCreate({ where: { name: roleName } }, { name: roleName });

    if (created) {
      logger.info(`Created ${roleName} role`);
    }

    const usernames = roles[roleName];

    for (let username of usernames) {
      const Member = server.registry.getModel(memberModelName);
      const member = await Member.findOne({ where: { username }});
      if (!member) {
        logger.info(`Could not find user ${username} when attempting to promote admins`);
        continue;
      }

      const roleData = {
        principalType: server.models.RoleMapping.USER,
        principalId: member.id
      };

      const principals = await role.principals.getAsync({ where: roleData });

      if (!principals.length) {
        await role.principals.create(roleData);
        logger.info(`Created role mapping for: ${member.username} -> ${role.name}`);
      } else {
        logger.info(`${username} was already a member of ${roleName}`);
      }
    }
  }
};
