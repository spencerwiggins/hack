import chai from 'chai';
import deepProp from './deepProp';

const expect = chai.expect;

describe('deepProps', () => {
  describe('keys passed as an array of strings', () => {
    it('should return null if key doesn\'t exist', () => {
      const intent = {
        parameters: {
          otherUser: {
            name: 'Joe',
          }
        },
      };
      const result = deepProp(['parameters', 'otherUser', 'lastName'])(intent);
      expect(result).to.be.null;
    });

    it('should return null if obj is empty', () => {
      const result = deepProp(['parameters', 'otherUser', 'lastName'])({});
      expect(result).to.be.null;
    });

    it('should return value if the exists', () => {
      const intent = {
        parameters: {
          otherUser: {
            name: 'Joe',
          }
        },
      };
      const result = deepProp(['parameters', 'otherUser', 'name'])(intent);
      expect(result).to.deep.equal(intent.parameters.otherUser.name);
    });
  });

  describe('keys passed as a string', () => {
    it('should return null if key doesn\'t exist', () => {
      const intent = {
        parameters: {
          otherUser: {
            name: 'Joe',
          }
        },
      };
      const result = deepProp('parameters.otherUser.lastName')(intent);
      expect(result).to.be.null;
    });

    it('should return value if key the exists', () => {
      const intent = {
        parameters: {
          otherUser: {
            name: 'Joe',
          }
        },
      };
      const result = deepProp('parameters.otherUser.name')(intent);
      expect(result).to.deep.equal(intent.parameters.otherUser.name);
    });

    it('should return null if obj is empty', () => {
      const result = deepProp('parameters.otherUser.lastName')({});
      expect(result).to.be.null;
    });
  });
});
