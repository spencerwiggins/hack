//@flow
import chai from 'chai';
import logLevel from './logLevel';

const expect = chai.expect;

describe('logLevel', function() {

  it('should return "warn" when called with production and no overrides', async function() {
    const level = logLevel('production');

    const expected = 'warn';

    expect(level).to.equal(expected);
  });

  it('should return "debug" when called with development and no overrides', async function() {
    const level = logLevel('development');

    const expected = 'debug';

    expect(level).to.equal(expected);
  });

  it('should return "warn" when called with test and no overrides', async function() {
    const level = logLevel('test');

    const expected = 'warn';

    expect(level).to.equal(expected);
  });

  it('should return "info" for anything else', async function() {
    const level = logLevel('anything else');

    const expected = 'info';

    expect(level).to.equal(expected);
  });

  it('should return the default level when it is provided and an env-specific level is not', async function() {
    const defaultLevel = 'error';

    const level = logLevel('anything else', { defaultLevel });

    const expected = defaultLevel;

    expect(level).to.equal(expected);
  });

  it('should return the "warn" when production is used, even when defaultLevel is provided', async function() {
    const defaultLevel = 'error';

    const level = logLevel('production', { defaultLevel });

    const expected = 'warn';

    expect(level).to.equal(expected);
  });

  it('should add new levels when the levels option is passed', async function() {
    const levels = {
      'anything else': 'error'
    };

    const level = logLevel('anything else', { levels });

    const expected = 'error';

    expect(level).to.equal(expected);
  });

  it('should not change the default level when providing new levels', async function() {
    const levels = {
      'anything else': 'error'
    };

    const level = logLevel('production', { levels });

    const expected = 'warn';

    expect(level).to.equal(expected);
  });

  it('should override the default when a level with the same name is provided', async function() {
    const levels = {
      production: 'error'
    };

    const level = logLevel('production', { levels });

    const expected = 'error';

    expect(level).to.equal(expected);
  });

});
