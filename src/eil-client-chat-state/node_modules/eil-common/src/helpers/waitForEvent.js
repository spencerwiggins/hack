//@flow
import Promise from 'bluebird';

export default function waitForEvent<T>(options: { event: string, target: Object, timeout?: ?number, trigger?: Function }): Promise<T> {
  return new Promise((resolve, reject) => {
    let timeoutHandle;
    const onEvent = (result: T) => {
      if (timeoutHandle) {
        clearTimeout(timeoutHandle);
      }
      resolve(result);
    };

    if (options.timeout) {
      timeoutHandle = setTimeout(() => {
        if (options.target.off) {
          options.target.off(options.event, onEvent);
        }
        reject(new Error('timeout'));
      }, options.timeout);
    }

    options.target.once(options.event, onEvent);
    if (options.trigger) {
      options.trigger();
    }
  });
}
