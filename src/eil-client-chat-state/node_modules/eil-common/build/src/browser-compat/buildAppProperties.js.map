{"version":3,"sources":["eil-common/src/browser-compat/buildAppProperties.js"],"names":["env","NODE_ENV","process","LOG_LEVEL","EIL_PLATFORM_URI","EIL_PLATFORM_APP_ID","EIL_PLATFORM_APP_TOKEN","buildAppProperties","schema","combinedSchema","getNode","key","split","reduce","acc","config","get","set","val","validate"],"mappings":";;;;;;;;AACA;;;;;;AAEA;AACA;AACA;AACA,IAAMA,MAAM;AACVC,YAAUC,QAAQF,GAAR,CAAYC,QADZ;AAEVE,aAAWD,QAAQF,GAAR,CAAYG,SAFb;;AAIVC,oBAAkBF,QAAQF,GAAR,CAAYI,gBAJpB;AAKVC,uBAAqBH,QAAQF,GAAR,CAAYK,mBALvB;AAMVC,0BAAwBJ,QAAQF,GAAR,CAAYM;AAN1B,CAAZ;;AASA,SAASC,kBAAT,GAAoF;AAAA,MAA9CC,MAA8C,uEAA7B,EAA6B;;AAClF,MAAMC,oEAEDD,MAFC,CAAN;;AAKA,MAAME,UAAU,SAASA,OAAT,CAAiBC,GAAjB,EAA2B;AACzC,WAAOA,IAAIC,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsB,UAACC,GAAD,EAAMH,GAAN,EAAc;AACzC,aAAOG,IAAIH,GAAJ,CAAP;AACD,KAFM,EAEJF,cAFI,CAAP;AAGD,GAJD;;AAMA,MAAMM,SAAkC;AACtCC,SAAK,aAACL,GAAD,EAAmB;AACtB,aAAOX,IAAIU,QAAQC,GAAR,EAAaX,GAAjB,CAAP;AACD,KAHqC;;AAKtCiB,SAAK,aAACN,GAAD,EAAgBO,GAAhB,EAAgC;AACnClB,UAAIU,QAAQC,GAAR,EAAaX,GAAjB,IAAwBkB,GAAxB;AACD,KAPqC;;AAStCC,cAAU,oBAAM,CAAE;AAToB,GAAxC;;AAYA,SAAOJ,MAAP;AACD;;kBAEcR,kB","file":"eil-common/src/browser-compat/buildAppProperties.js","sourcesContent":["//@flow\nimport defaultSchema from '../appPropertiesDefaultSchema';\n\n// Webpack replaces refs to `process.env.*` with the string literal, so we can't do dynamic property\n// access.  This object gets around that, but we need to add any env vars here that we want to access\n// through appProperties.\nconst env = {\n  NODE_ENV: process.env.NODE_ENV,\n  LOG_LEVEL: process.env.LOG_LEVEL,\n\n  EIL_PLATFORM_URI: process.env.EIL_PLATFORM_URI,\n  EIL_PLATFORM_APP_ID: process.env.EIL_PLATFORM_APP_ID,\n  EIL_PLATFORM_APP_TOKEN: process.env.EIL_PLATFORM_APP_TOKEN,\n};\n\nfunction buildAppProperties<PropList>(schema: Object = {}): AppProperties<PropList> {\n  const combinedSchema = {\n    ...defaultSchema,\n    ...schema,\n  };\n\n  const getNode = function getNode(key: any) {\n    return key.split('.').reduce((acc, key) => {\n      return acc[key];\n    }, combinedSchema);\n  };\n\n  const config: AppProperties<PropList> = {\n    get: (key: PropList) => {\n      return env[getNode(key).env];\n    },\n\n    set: (key: PropList, val: string) => {\n      env[getNode(key).env] = val;\n    },\n\n    validate: () => {},\n  };\n\n  return config;\n}\n\nexport default buildAppProperties;\n"],"sourceRoot":"/source/"}