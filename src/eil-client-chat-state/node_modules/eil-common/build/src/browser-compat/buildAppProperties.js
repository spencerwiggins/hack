'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _appPropertiesDefaultSchema = require('../appPropertiesDefaultSchema');

var _appPropertiesDefaultSchema2 = _interopRequireDefault(_appPropertiesDefaultSchema);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Webpack replaces refs to `process.env.*` with the string literal, so we can't do dynamic property
// access.  This object gets around that, but we need to add any env vars here that we want to access
// through appProperties.
var env = {
  NODE_ENV: process.env.NODE_ENV,
  LOG_LEVEL: process.env.LOG_LEVEL,

  EIL_PLATFORM_URI: process.env.EIL_PLATFORM_URI,
  EIL_PLATFORM_APP_ID: process.env.EIL_PLATFORM_APP_ID,
  EIL_PLATFORM_APP_TOKEN: process.env.EIL_PLATFORM_APP_TOKEN
};

function buildAppProperties() {
  var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var combinedSchema = _extends({}, _appPropertiesDefaultSchema2.default, schema);

  var getNode = function getNode(key) {
    return key.split('.').reduce(function (acc, key) {
      return acc[key];
    }, combinedSchema);
  };

  var config = {
    get: function get(key) {
      return env[getNode(key).env];
    },

    set: function set(key, val) {
      env[getNode(key).env] = val;
    },

    validate: function validate() {}
  };

  return config;
}

exports.default = buildAppProperties;
//# sourceMappingURL=buildAppProperties.js.map
