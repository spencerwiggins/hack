{"version":3,"sources":["eil-common/src/helpers/logLevel.spec.js"],"names":["expect","describe","it","level","expected","to","equal","defaultLevel","levels","production"],"mappings":"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","file":"eil-common/src/helpers/logLevel.spec.js","sourcesContent":["//@flow\nimport chai from 'chai';\nimport logLevel from './logLevel';\n\nconst expect = chai.expect;\n\ndescribe('logLevel', function() {\n\n  it('should return \"warn\" when called with production and no overrides', async function() {\n    const level = logLevel('production');\n\n    const expected = 'warn';\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should return \"debug\" when called with development and no overrides', async function() {\n    const level = logLevel('development');\n\n    const expected = 'debug';\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should return \"warn\" when called with test and no overrides', async function() {\n    const level = logLevel('test');\n\n    const expected = 'warn';\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should return \"info\" for anything else', async function() {\n    const level = logLevel('anything else');\n\n    const expected = 'info';\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should return the default level when it is provided and an env-specific level is not', async function() {\n    const defaultLevel = 'error';\n\n    const level = logLevel('anything else', { defaultLevel });\n\n    const expected = defaultLevel;\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should return the \"warn\" when production is used, even when defaultLevel is provided', async function() {\n    const defaultLevel = 'error';\n\n    const level = logLevel('production', { defaultLevel });\n\n    const expected = 'warn';\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should add new levels when the levels option is passed', async function() {\n    const levels = {\n      'anything else': 'error'\n    };\n\n    const level = logLevel('anything else', { levels });\n\n    const expected = 'error';\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should not change the default level when providing new levels', async function() {\n    const levels = {\n      'anything else': 'error'\n    };\n\n    const level = logLevel('production', { levels });\n\n    const expected = 'warn';\n\n    expect(level).to.equal(expected);\n  });\n\n  it('should override the default when a level with the same name is provided', async function() {\n    const levels = {\n      production: 'error'\n    };\n\n    const level = logLevel('production', { levels });\n\n    const expected = 'error';\n\n    expect(level).to.equal(expected);\n  });\n\n});\n"],"sourceRoot":"/source/"}