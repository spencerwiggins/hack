{"version":3,"sources":["eil-common/src/helpers/deepProp.spec.js"],"names":["expect","describe","it","intent","parameters","otherUser","name","result","to","be","null","deep","equal"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,eAAKA,MAApB;;AAEAC,SAAS,WAAT,EAAsB,YAAM;AAC1BA,WAAS,oCAAT,EAA+C,YAAM;AACnDC,OAAG,0CAAH,EAA+C,YAAM;AACnD,UAAMC,SAAS;AACbC,oBAAY;AACVC,qBAAW;AACTC,kBAAM;AADG;AADD;AADC,OAAf;AAOA,UAAMC,SAAS,wBAAS,CAAC,YAAD,EAAe,WAAf,EAA4B,UAA5B,CAAT,EAAkDJ,MAAlD,CAAf;AACAH,aAAOO,MAAP,EAAeC,EAAf,CAAkBC,EAAlB,CAAqBC,IAArB;AACD,KAVD;;AAYAR,OAAG,oCAAH,EAAyC,YAAM;AAC7C,UAAMK,SAAS,wBAAS,CAAC,YAAD,EAAe,WAAf,EAA4B,UAA5B,CAAT,EAAkD,EAAlD,CAAf;AACAP,aAAOO,MAAP,EAAeC,EAAf,CAAkBC,EAAlB,CAAqBC,IAArB;AACD,KAHD;;AAKAR,OAAG,mCAAH,EAAwC,YAAM;AAC5C,UAAMC,SAAS;AACbC,oBAAY;AACVC,qBAAW;AACTC,kBAAM;AADG;AADD;AADC,OAAf;AAOA,UAAMC,SAAS,wBAAS,CAAC,YAAD,EAAe,WAAf,EAA4B,MAA5B,CAAT,EAA8CJ,MAA9C,CAAf;AACAH,aAAOO,MAAP,EAAeC,EAAf,CAAkBG,IAAlB,CAAuBC,KAAvB,CAA6BT,OAAOC,UAAP,CAAkBC,SAAlB,CAA4BC,IAAzD;AACD,KAVD;AAWD,GA7BD;;AA+BAL,WAAS,yBAAT,EAAoC,YAAM;AACxCC,OAAG,0CAAH,EAA+C,YAAM;AACnD,UAAMC,SAAS;AACbC,oBAAY;AACVC,qBAAW;AACTC,kBAAM;AADG;AADD;AADC,OAAf;AAOA,UAAMC,SAAS,wBAAS,+BAAT,EAA0CJ,MAA1C,CAAf;AACAH,aAAOO,MAAP,EAAeC,EAAf,CAAkBC,EAAlB,CAAqBC,IAArB;AACD,KAVD;;AAYAR,OAAG,uCAAH,EAA4C,YAAM;AAChD,UAAMC,SAAS;AACbC,oBAAY;AACVC,qBAAW;AACTC,kBAAM;AADG;AADD;AADC,OAAf;AAOA,UAAMC,SAAS,wBAAS,2BAAT,EAAsCJ,MAAtC,CAAf;AACAH,aAAOO,MAAP,EAAeC,EAAf,CAAkBG,IAAlB,CAAuBC,KAAvB,CAA6BT,OAAOC,UAAP,CAAkBC,SAAlB,CAA4BC,IAAzD;AACD,KAVD;;AAYAJ,OAAG,oCAAH,EAAyC,YAAM;AAC7C,UAAMK,SAAS,wBAAS,+BAAT,EAA0C,EAA1C,CAAf;AACAP,aAAOO,MAAP,EAAeC,EAAf,CAAkBC,EAAlB,CAAqBC,IAArB;AACD,KAHD;AAID,GA7BD;AA8BD,CA9DD","file":"eil-common/src/helpers/deepProp.spec.js","sourcesContent":["import chai from 'chai';\nimport deepProp from './deepProp';\n\nconst expect = chai.expect;\n\ndescribe('deepProps', () => {\n  describe('keys passed as an array of strings', () => {\n    it('should return null if key doesn\\'t exist', () => {\n      const intent = {\n        parameters: {\n          otherUser: {\n            name: 'Joe',\n          }\n        },\n      };\n      const result = deepProp(['parameters', 'otherUser', 'lastName'])(intent);\n      expect(result).to.be.null;\n    });\n\n    it('should return null if obj is empty', () => {\n      const result = deepProp(['parameters', 'otherUser', 'lastName'])({});\n      expect(result).to.be.null;\n    });\n\n    it('should return value if the exists', () => {\n      const intent = {\n        parameters: {\n          otherUser: {\n            name: 'Joe',\n          }\n        },\n      };\n      const result = deepProp(['parameters', 'otherUser', 'name'])(intent);\n      expect(result).to.deep.equal(intent.parameters.otherUser.name);\n    });\n  });\n\n  describe('keys passed as a string', () => {\n    it('should return null if key doesn\\'t exist', () => {\n      const intent = {\n        parameters: {\n          otherUser: {\n            name: 'Joe',\n          }\n        },\n      };\n      const result = deepProp('parameters.otherUser.lastName')(intent);\n      expect(result).to.be.null;\n    });\n\n    it('should return value if key the exists', () => {\n      const intent = {\n        parameters: {\n          otherUser: {\n            name: 'Joe',\n          }\n        },\n      };\n      const result = deepProp('parameters.otherUser.name')(intent);\n      expect(result).to.deep.equal(intent.parameters.otherUser.name);\n    });\n\n    it('should return null if obj is empty', () => {\n      const result = deepProp('parameters.otherUser.lastName')({});\n      expect(result).to.be.null;\n    });\n  });\n});\n"],"sourceRoot":"/source/"}