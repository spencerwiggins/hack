{"version":3,"sources":["eil-common/src/helpers/selectTopOutliers.js"],"names":["selectTopOutliers","inputResults","sortedScores","reverse","map","result","score","q25","quantileSorted","q75","iqr","maxScore","length","topResults","filter","idx","Math","ceil","slice","max"],"mappings":";;;;;kBAIwBA,iB;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,iBAAT,CAA2BC,YAA3B,EAAyF;;AAEtG,MAAMC,eAAe,iBAAEC,OAAF,CAAUF,aAAaG,GAAb,CAAiB;AAAA,WAAUC,OAAOC,KAAjB;AAAA,GAAjB,CAAV,CAArB;;AAEA,MAAMC,MAAM,2BAAGC,cAAH,CAAkBN,YAAlB,EAAgC,IAAhC,CAAZ;AACA,MAAMO,MAAM,2BAAGD,cAAH,CAAkBN,YAAlB,EAAgC,IAAhC,CAAZ;AACA,MAAMQ,MAAMD,MAAMF,GAAlB;AACA,MAAMI,WAAWT,aAAaA,aAAaU,MAAb,GAAsB,CAAnC,CAAjB;;AAEA,MAAIC,mBAAJ;;AAEA,MAAIF,WAAW,MAAMD,GAAN,GAAYD,GAA3B,EAAgC;AAC9B;AACAI,iBAAaZ,aACVa,MADU,CACH;AAAA,aAAUT,OAAOC,KAAP,GAAe,MAAMI,GAAN,GAAYD,GAArC;AAAA,KADG,CAAb;AAED,GAJD,MAIO;AACL;AACA,QAAIM,MAAMC,KAAKC,IAAL,CAAUhB,aAAaW,MAAb,GAAsB,IAAhC,CAAV;AACAC,iBAAaZ,aAAaiB,KAAb,CAAmB,CAAnB,EAAsBF,KAAKG,GAAL,CAASJ,GAAT,EAAc,CAAd,CAAtB,CAAb;AACD;;AAED,SAAOF,UAAP;AACD","file":"eil-common/src/helpers/selectTopOutliers.js","sourcesContent":["// @flow\nimport ss from 'simple-statistics';\nimport _ from 'lodash';\n\nexport default function selectTopOutliers(inputResults: Array<SearchResult<*>>): Array<SearchResult<*>> {\n\n  const sortedScores = _.reverse(inputResults.map(result => result.score));\n\n  const q25 = ss.quantileSorted(sortedScores, 0.25);\n  const q75 = ss.quantileSorted(sortedScores, 0.75);\n  const iqr = q75 - q25;\n  const maxScore = sortedScores[sortedScores.length - 1];\n\n  let topResults;\n\n  if (maxScore > 1.5 * iqr + q75) {\n    // get the outliers, anything above 1.5(iqr)+q75\n    topResults = inputResults\n      .filter(result => result.score > 1.5 * iqr + q75);\n  } else {\n    // get the larger of the first 5 items or the top quartile\n    let idx = Math.ceil(inputResults.length * 0.25);\n    topResults = inputResults.slice(0, Math.max(idx, 5));\n  }\n\n  return topResults;\n}\n"],"sourceRoot":"/source/"}