{"version":3,"sources":["eil-common/src/helpers/dasherize.spec.js"],"names":["expect","use","describe","context","input","it","result","to","equal"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,eAAKA,MAApB;AACA,eAAKC,GAAL;AACA,eAAKA,GAAL;;AAEAC,SAAS,WAAT,EAAsB,YAAW;;AAE/BC,UAAQ,2BAAR,EAAqC,YAAY;AAC/C,QAAMC,QAAQ,eAAd;;AAEAC,OAAG,oCAAH,EAAyC,YAAY;AACnD,UAAMC,SAAS,yBAAUF,KAAV,CAAf;;AAEAJ,aAAOM,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,kBAAxB;AACD,KAJD;AAKD,GARD;;AAUAL,UAAQ,6BAAR,EAAuC,YAAY;AACjD,QAAMC,QAAQ,kBAAd;;AAEAC,OAAG,oCAAH,EAAyC,YAAY;AACnD,UAAMC,SAAS,yBAAUF,KAAV,CAAf;;AAEAJ,aAAOM,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,kBAAxB;AACD,KAJD;AAKD,GARD;AASD,CArBD","file":"eil-common/src/helpers/dasherize.spec.js","sourcesContent":["//@flow\nimport chai from 'chai';\nimport chaiAsPromised from \"chai-as-promised\";\nimport sinonChai from \"sinon-chai\";\nimport dasherize from './dasherize';\n\nconst expect = chai.expect;\nchai.use(sinonChai);\nchai.use(chaiAsPromised);\n\ndescribe('dasherize', function() {\n\n  context('given a camel case string', function () {\n    const input = 'iAmCamelCased';\n\n    it('should return a dasherized version', function () {\n      const result = dasherize(input);\n\n      expect(result).to.equal('i-am-camel-cased');\n    });\n  });\n\n  context('given an underscored string', function () {\n    const input = 'i_am_underscored';\n\n    it('should return a dasherized version', function () {\n      const result = dasherize(input);\n\n      expect(result).to.equal('i-am-underscored');\n    });\n  });\n});\n"],"sourceRoot":"/source/"}