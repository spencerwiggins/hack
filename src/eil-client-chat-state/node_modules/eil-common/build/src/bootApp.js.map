{"version":3,"sources":["eil-common/src/bootApp.js"],"names":["bootApp","app","Promise","resolve","reject","on","booting","bootOptions","appRootDir","join","__dirname","bootDirs","err"],"mappings":";;;;;kBAIyBA,O;;AAHzB;;;;AACA;;;;;;AAEgB,SAASA,OAAT,CAAiBC,GAAjB,EAAwD;AACtE,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,QAAII,EAAJ,CAAO,QAAP,EAAiB;AAAA,aAAMF,QAAQF,GAAR,CAAN;AAAA,KAAjB;;AAEA;AACA,QAAI,CAACA,IAAIK,OAAT,EAAkB;AAChB,UAAMC,cAAc;AAClBC,oBAAY,eAAKC,IAAL,CAAUC,SAAV,EAAqB,eAArB,CADM;AAElBC,kBAAU,CACR,sCADQ;AAFQ,OAApB;;AAOA,kCAAKV,GAAL,EAAUM,WAAV,EAAuB,UAACK,GAAD;AAAA,eAASA,OAAOR,OAAOQ,GAAP,CAAhB;AAAA,OAAvB;AACD;AACF,GAdM,CAAP;AAeD","file":"eil-common/src/bootApp.js","sourcesContent":["//@flow\nimport path from 'path';\nimport boot from 'loopback-boot';\n\nexport default  function bootApp(app:LoopbackApp): Promise<LoopbackApp> {\n  return new Promise((resolve, reject) => {\n    app.on('booted', () => resolve(app));\n\n    // if not already booting (flag is set by loopback-boot), boot it now\n    if (!app.booting) {\n      const bootOptions = {\n        appRootDir: path.join(__dirname, '../src/server'),\n        bootDirs: [\n          'eil-platform-remotes/lib/server/boot',\n        ],\n      };\n\n      boot(app, bootOptions, (err) => err && reject(err));\n    }\n  });\n}\n"],"sourceRoot":"/source/"}