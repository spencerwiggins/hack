"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventBroker = function () {
  function EventBroker() {
    _classCallCheck(this, EventBroker);

    this.receivers = [];
    this.suspendedReceivers = [];
    this.suspendedHandlers = [];
  }

  _createClass(EventBroker, [{
    key: "addReceiver",
    value: function addReceiver(receiver) {
      this.receivers.push(receiver);
    }
  }, {
    key: "removeReceiver",
    value: function removeReceiver(receiver) {
      var index = this.receivers.indexOf(receiver);
      if (index >= 0) {
        this.receivers.splice(index, 1);
      }
    }
  }, {
    key: "removeAllReceivers",
    value: function removeAllReceivers() {
      this.receivers = [];
    }
  }, {
    key: "suspendCurrentReceivers",
    value: function suspendCurrentReceivers() {
      this.suspendedReceivers = this.suspendedReceivers.concat(this.receivers);
      this.receivers = [];
    }
  }, {
    key: "resumeAllReceivers",
    value: function resumeAllReceivers() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          skipReplay = _ref.skipReplay;

      if (!skipReplay) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.suspendedHandlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _fn = _step.value;

            _fn();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      this.receivers = this.receivers.concat(this.suspendedReceivers);
      this.suspendedReceivers = [];
      this.suspendedHandlers = [];
    }
  }, {
    key: "_trigger",
    value: function _trigger(selector, binder) {
      var _this = this;

      this.receivers.map(selector).filter(function (fn) {
        return !!fn;
      }).map(binder).forEach(function (fn) {
        return fn();
      });

      this.suspendedReceivers.map(selector).filter(function (fn) {
        return !!fn;
      }).map(binder).forEach(function (fn) {
        return _this.suspendedHandlers.push(fn);
      });
    }
  }]);

  return EventBroker;
}();

exports.default = EventBroker;
//# sourceMappingURL=EventBroker.js.map
