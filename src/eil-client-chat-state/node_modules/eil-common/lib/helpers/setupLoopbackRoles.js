'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable no-console */
if (!global._babelPolyfill) {
  require('babel-polyfill');
}

exports.default = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(server, roles) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var _options$logger, logger, _options$memberModelN, memberModelName, roleName, _ref2, _ref3, role, created, usernames, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, username, Member, member, roleData, principals;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _options$logger = options.logger, logger = _options$logger === undefined ? { info: function info(msg) {
                return console.log(msg);
              } } : _options$logger, _options$memberModelN = options.memberModelName, memberModelName = _options$memberModelN === undefined ? 'Member' : _options$memberModelN;
            // enable authentication

            _context.t0 = regeneratorRuntime.keys(roles);

          case 2:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 56;
              break;
            }

            roleName = _context.t1.value;
            _context.next = 6;
            return server.models.Role.findOrCreate({ where: { name: roleName } }, { name: roleName });

          case 6:
            _ref2 = _context.sent;
            _ref3 = _slicedToArray(_ref2, 2);
            role = _ref3[0];
            created = _ref3[1];


            if (created) {
              logger.info('Created ' + roleName + ' role');
            }

            usernames = roles[roleName];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 15;
            _iterator = usernames[Symbol.iterator]();

          case 17:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 40;
              break;
            }

            username = _step.value;
            Member = server.registry.getModel(memberModelName);
            _context.next = 22;
            return Member.findOne({ where: { username: username } });

          case 22:
            member = _context.sent;

            if (member) {
              _context.next = 26;
              break;
            }

            logger.info('Could not find user ' + username + ' when attempting to promote admins');
            return _context.abrupt('continue', 37);

          case 26:
            roleData = {
              principalType: server.models.RoleMapping.USER,
              principalId: member.id
            };
            _context.next = 29;
            return role.principals.getAsync({ where: roleData });

          case 29:
            principals = _context.sent;

            if (principals.length) {
              _context.next = 36;
              break;
            }

            _context.next = 33;
            return role.principals.create(roleData);

          case 33:
            logger.info('Created role mapping for: ' + member.username + ' -> ' + role.name);
            _context.next = 37;
            break;

          case 36:
            logger.info(username + ' was already a member of ' + roleName);

          case 37:
            _iteratorNormalCompletion = true;
            _context.next = 17;
            break;

          case 40:
            _context.next = 46;
            break;

          case 42:
            _context.prev = 42;
            _context.t2 = _context['catch'](15);
            _didIteratorError = true;
            _iteratorError = _context.t2;

          case 46:
            _context.prev = 46;
            _context.prev = 47;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 49:
            _context.prev = 49;

            if (!_didIteratorError) {
              _context.next = 52;
              break;
            }

            throw _iteratorError;

          case 52:
            return _context.finish(49);

          case 53:
            return _context.finish(46);

          case 54:
            _context.next = 2;
            break;

          case 56:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[15, 42, 46, 54], [47,, 49, 53]]);
  }));

  function setupLoopbackRoles(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return setupLoopbackRoles;
}();
//# sourceMappingURL=setupLoopbackRoles.js.map
