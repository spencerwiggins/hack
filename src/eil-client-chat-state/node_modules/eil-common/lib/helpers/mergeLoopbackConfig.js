'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mergeLoopbackConfig;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _module = require('module');

var _module2 = _interopRequireDefault(_module);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolveConfigs(rootDir, src, type) {
  var paths = [_path2.default.join(rootDir, src, type + '.json'), _path2.default.join(rootDir, src, type + '.local.js')].filter(function (src) {
    return _fs2.default.existsSync(src);
  });

  if (paths.length === 0) {
    // if we didn't find any config files, look for the files in the parent directory
    var parent = _path2.default.join(src, '..');
    // but stop traversing when we reach the root of src
    if (parent === '.') {
      return [];
    } else {
      return resolveConfigs(rootDir, parent, type);
    }
  } else {
    return paths;
  }
}

// $FlowFixMe not sure why this is erroring, but flow can't find the "module" module.


var PATH_RX = /^[\w-]+\/lib\/server/;
function mergeLoopbackConfig(sources, context, type) {
  var rootDir = _module2.default._nodeModulePaths(context).filter(function (src) {
    return _fs2.default.existsSync(src);
  })[0];

  var configs = _lodash2.default.chain(sources).filter(function (src) {
    return PATH_RX.test(src);
  }).map(function (src) {
    return resolveConfigs(rootDir, src, type);
  }).flatten().map(function (src) {
    // If we don't do require.resolve first, flow bombs with error "The parameter passed to
    // require() must be a literal string"
    var file = require.resolve(src);
    return require(file);
  }).value();

  configs.unshift({});

  return _lodash2.default.merge.apply(null, configs);
}
//# sourceMappingURL=mergeLoopbackConfig.js.map
