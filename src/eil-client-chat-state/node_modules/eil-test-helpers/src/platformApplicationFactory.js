//@flow
async function platformApplicationFactory(app: LoopbackApp): Promise<{ platformApplication: Object, platformOrganization: Object }> {
  const { PlatformOrganization } = app.models;

  const platformOrganization = await PlatformOrganization.create({
    name: `Test Org ${Date.now()}`,
    realm: 'test',
  });

  const platformApplication = await platformOrganization.applications.create({
    name: `Test App ${Date.now()}`,
  });

  return {
    platformApplication,
    platformOrganization
  };
}

declare type PlatformApplicationFactoryDestroyArg = {
  platformOrganization: Object,
  platformApplication: Object
} | Object;

platformApplicationFactory.destroy = async function platformApplicationFactoryDestroy(arg: PlatformApplicationFactoryDestroyArg): Promise<void> {
  let platformApplication: Object,
    platformOrganization: Object;

  if (arg.hasOwnProperty('platformApplication')) {
    platformApplication = (arg:any).platformApplication;
    platformOrganization = (arg:any).platformOrganization;
  }


  if (!platformApplication || !platformOrganization ) {
    if (arg.destroy) { // a single model was provided
      if ((arg: any).platformOrganizationId) { // a platformApplication was provided
        platformApplication = (arg: any);
        platformOrganization = await platformApplication.organization.getAsync();
      } else {
        platformOrganization = (arg: any);
        platformApplication = (await platformOrganization.applications.getAsync())[0];
      }
    }
  }

  await Promise.all([
    platformApplication && platformApplication.destroy(),
    platformOrganization && platformOrganization.destroy()
  ]);
};

export default platformApplicationFactory;
