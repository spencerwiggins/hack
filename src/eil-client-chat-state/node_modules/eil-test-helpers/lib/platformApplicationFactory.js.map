{"version":3,"sources":["platformApplicationFactory.js"],"names":["app","PlatformOrganization","models","create","name","Date","now","realm","platformOrganization","applications","platformApplication","platformApplicationFactory","destroy","arg","hasOwnProperty","platformOrganizationId","organization","getAsync","Promise","all","platformApplicationFactoryDestroy"],"mappings":";;;;;;;uDACA,iBAA0CA,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gCADV,GACmCD,IAAIE,MADvC,CACUD,oBADV;AAAA;AAAA,mBAGqCA,qBAAqBE,MAArB,CAA4B;AAC7DC,kCAAkBC,KAAKC,GAAL,EAD2C;AAE7DC,qBAAO;AAFsD,aAA5B,CAHrC;;AAAA;AAGQC,gCAHR;AAAA;AAAA,mBAQoCA,qBAAqBC,YAArB,CAAkCN,MAAlC,CAAyC;AACzEC,kCAAkBC,KAAKC,GAAL;AADuD,aAAzC,CARpC;;AAAA;AAQQI,+BARR;AAAA,6CAYS;AACLA,sDADK;AAELF;AAFK,aAZT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,0B;;;;;;;AAuBfA,2BAA2BC,OAA3B;AAAA,wDAAqC,kBAAiDC,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BH,+BAD+B,WAEjCF,oBAFiC;;;AAInC,gBAAIK,IAAIC,cAAJ,CAAmB,qBAAnB,CAAJ,EAA+C;AAC7CJ,oCAAuBG,GAAD,CAAUH,mBAAhC;AACAF,qCAAwBK,GAAD,CAAUL,oBAAjC;AACD;;AAPkC,kBAU/B,CAACE,mBAAD,IAAwB,CAACF,oBAVM;AAAA;AAAA;AAAA;;AAAA,iBAW7BK,IAAID,OAXyB;AAAA;AAAA;AAAA;;AAAA,iBAY1BC,GAAD,CAAWE,sBAZgB;AAAA;AAAA;AAAA;;AAYU;AACvCL,kCAAuBG,GAAvB;AAb6B;AAAA,mBAcAH,oBAAoBM,YAApB,CAAiCC,QAAjC,EAdA;;AAAA;AAc7BT,gCAd6B;AAAA;AAAA;;AAAA;AAgB7BA,mCAAwBK,GAAxB;AAhB6B;AAAA,mBAiBAL,qBAAqBC,YAArB,CAAkCQ,QAAlC,EAjBA;;AAAA;AAiB7BP,+BAjB6B,kBAiB8C,CAjB9C;;AAAA;AAAA;AAAA,mBAsB7BQ,QAAQC,GAAR,CAAY,CAChBT,uBAAuBA,oBAAoBE,OAApB,EADP,EAEhBJ,wBAAwBA,qBAAqBI,OAArB,EAFR,CAAZ,CAtB6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA,WAAoDQ,iCAApD;AAAA;AAAA;;AAAA,SAAoDA,iCAApD;AAAA;;kBA4BeT,0B","file":"platformApplicationFactory.js","sourcesContent":["//@flow\nasync function platformApplicationFactory(app: LoopbackApp): Promise<{ platformApplication: Object, platformOrganization: Object }> {\n  const { PlatformOrganization } = app.models;\n\n  const platformOrganization = await PlatformOrganization.create({\n    name: `Test Org ${Date.now()}`,\n    realm: 'test',\n  });\n\n  const platformApplication = await platformOrganization.applications.create({\n    name: `Test App ${Date.now()}`,\n  });\n\n  return {\n    platformApplication,\n    platformOrganization\n  };\n}\n\ndeclare type PlatformApplicationFactoryDestroyArg = {\n  platformOrganization: Object,\n  platformApplication: Object\n} | Object;\n\nplatformApplicationFactory.destroy = async function platformApplicationFactoryDestroy(arg: PlatformApplicationFactoryDestroyArg): Promise<void> {\n  let platformApplication: Object,\n    platformOrganization: Object;\n\n  if (arg.hasOwnProperty('platformApplication')) {\n    platformApplication = (arg:any).platformApplication;\n    platformOrganization = (arg:any).platformOrganization;\n  }\n\n\n  if (!platformApplication || !platformOrganization ) {\n    if (arg.destroy) { // a single model was provided\n      if ((arg: any).platformOrganizationId) { // a platformApplication was provided\n        platformApplication = (arg: any);\n        platformOrganization = await platformApplication.organization.getAsync();\n      } else {\n        platformOrganization = (arg: any);\n        platformApplication = (await platformOrganization.applications.getAsync())[0];\n      }\n    }\n  }\n\n  await Promise.all([\n    platformApplication && platformApplication.destroy(),\n    platformOrganization && platformOrganization.destroy()\n  ]);\n};\n\nexport default platformApplicationFactory;\n"],"sourceRoot":"/source/"}