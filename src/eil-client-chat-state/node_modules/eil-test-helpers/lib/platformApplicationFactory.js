'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var platformApplicationFactory = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(app) {
    var PlatformOrganization, platformOrganization, platformApplication;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            PlatformOrganization = app.models.PlatformOrganization;
            _context.next = 3;
            return PlatformOrganization.create({
              name: 'Test Org ' + Date.now(),
              realm: 'test'
            });

          case 3:
            platformOrganization = _context.sent;
            _context.next = 6;
            return platformOrganization.applications.create({
              name: 'Test App ' + Date.now()
            });

          case 6:
            platformApplication = _context.sent;
            return _context.abrupt('return', {
              platformApplication: platformApplication,
              platformOrganization: platformOrganization
            });

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function platformApplicationFactory(_x) {
    return _ref.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

platformApplicationFactory.destroy = function () {
  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(arg) {
    var platformApplication, platformOrganization;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            platformApplication = void 0, platformOrganization = void 0;


            if (arg.hasOwnProperty('platformApplication')) {
              platformApplication = arg.platformApplication;
              platformOrganization = arg.platformOrganization;
            }

            if (!(!platformApplication || !platformOrganization)) {
              _context2.next = 15;
              break;
            }

            if (!arg.destroy) {
              _context2.next = 15;
              break;
            }

            if (!arg.platformOrganizationId) {
              _context2.next = 11;
              break;
            }

            // a platformApplication was provided
            platformApplication = arg;
            _context2.next = 8;
            return platformApplication.organization.getAsync();

          case 8:
            platformOrganization = _context2.sent;
            _context2.next = 15;
            break;

          case 11:
            platformOrganization = arg;
            _context2.next = 14;
            return platformOrganization.applications.getAsync();

          case 14:
            platformApplication = _context2.sent[0];

          case 15:
            _context2.next = 17;
            return Promise.all([platformApplication && platformApplication.destroy(), platformOrganization && platformOrganization.destroy()]);

          case 17:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function platformApplicationFactoryDestroy(_x2) {
    return _ref2.apply(this, arguments);
  }

  return platformApplicationFactoryDestroy;
}();

exports.default = platformApplicationFactory;
//# sourceMappingURL=platformApplicationFactory.js.map
