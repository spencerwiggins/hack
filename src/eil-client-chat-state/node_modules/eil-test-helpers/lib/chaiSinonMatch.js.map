{"version":3,"sources":["chaiSinonMatch.js"],"names":["chai","Assertion","addMethod","arg","expected","actual","test","_obj","Error","assert","message"],"mappings":";;;;;;kBAEe,UAASA,IAAT,EAAuB;AACpCA,OAAKC,SAAL,CAAeC,SAAf,CAAyB,OAAzB,EAAkC,UAASC,GAAT,EAAc;AAC9C;AACA,QAAIC,iBAAJ;AAAA,QAAcC,eAAd;;AAEA,QAAIF,OAAOA,IAAIG,IAAf,EAAqB;AACnBF,iBAAWD,GAAX;AACAE,eAAS,KAAKE,IAAd;AACD,KAHD,MAGO;AACLH,iBAAW,KAAKG,IAAhB;AACAF,eAASF,GAAT;AACD;;AAED,QAAI,OAAOC,SAASE,IAAhB,KAAyB,UAA7B,EAAyC;AACvC,YAAM,IAAIE,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAED,SAAKC,MAAL,CACEL,SAASE,IAAT,CAAcD,MAAd,CADF,EAEE,iCAFF,EAGE,qCAHF,EAIED,SAASM,OAJX,EAKEL,MALF;AAOD,GAvBD;AAwBD,C","file":"chaiSinonMatch.js","sourcesContent":["//@flow\n\nexport default function(chai: Object) {\n  chai.Assertion.addMethod('match', function(arg) {\n    // allow the match to be provided in the expectation or the match arg.\n    let expected, actual;\n\n    if (arg && arg.test) {\n      expected = arg;\n      actual = this._obj;\n    } else {\n      expected = this._obj;\n      actual = arg;\n    }\n\n    if (typeof expected.test !== 'function') {\n      throw new Error('Cannot use the .match() method with anything but a sinon matcher.');\n    }\n\n    this.assert(\n      expected.test(actual),\n      'expected #{exp} to match #{act}',\n      'expected #{exp} to not match #{act}',\n      expected.message,\n      actual\n    );\n  });\n}\n"],"sourceRoot":"/source/"}